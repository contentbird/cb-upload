// Generated by CoffeeScript 1.3.3
(function() {
  var Buffers, aws2js, fs, http, spawn, url;

  http = require('http');

  url = require('url');

  aws2js = require('aws2js');

  Buffers = require('buffers');

  spawn = require('child_process').spawn;

  fs = require('fs');

  this.Server = (function() {
    var convertImage, getDimensions, loadS3;

    function Server() {}

    Server.constructor = function() {};

    Server.prototype.startHTTP = function(http_port, callback) {
      var port, requestHandler,
        _this = this;
      port = parseInt(process.env.PORT) || http_port || 5000;
      requestHandler = function(req, res) {
        var image_path, img, jsonp_callback, url_parts;
        url_parts = url.parse(req.url, true);
        image_path = url_parts.query.image;
        jsonp_callback = url_parts.query.callback;
        if (url_parts.pathname === '/resize_image') {
          return _this.resizeAvatar(image_path, function(error, path, width, height) {
            var json;
            if (error) {
              json = JSON.stringify({
                "error": error.toString()
              });
              res.writeHead(200, {
                "Content-Type": "text/html"
              });
              return res.end(json);
            } else {
              json = JSON.stringify({
                "key": path,
                "width": width,
                "height": height
              });
              res.writeHead(200, {
                "Content-Type": "application/json"
              });
              return res.end("" + jsonp_callback + "(" + json + ")");
            }
          });
        } else if (url_parts.pathname === '/ping') {
          img = fs.readFileSync('assets/blank.gif');
          res.writeHead(200, {
            'Content-Type': 'image/gif'
          });
          return res.end(img, 'binary');
        } else {
          res.writeHead(200, {
            "Content-Type": "text/html"
          });
          return res.end('Hello from ContentBird Upload');
        }
      };
      this.httpServer = http.createServer(requestHandler);
      return this.httpServer.listen(Number(port), function() {
        return callback();
      });
    };

    loadS3 = function(key, secret, bucket) {
      var s3;
      s3 = aws2js.load('s3', key, secret);
      s3.setBucket(bucket);
      return s3;
    };

    convertImage = function(image_stream, callback) {
      var args, buffer, proc;
      args = '-resize 400x400 jpg:-';
      proc = spawn('convert', ['-'].concat(args.split(' ')));
      proc.stderr.on('data', function(err) {
        return callback(err.toString(), null);
      });
      proc.on('error', function(err) {
        return callback(err.toString(), null);
      });
      image_stream.pipe(proc.stdin);
      buffer = new Buffers();
      proc.stdout.on('data', buffer.push.bind(buffer));
      return proc.stdout.on('end', function() {
        return callback(null, buffer);
      });
    };

    getDimensions = function(buffer, callback) {
      var proc2;
      proc2 = spawn('identify', ['-']);
      proc2.stderr.on('data', function(err) {
        return callback(err.toString(), null, null);
      });
      proc2.stdin.write(buffer.toBuffer());
      proc2.stdin.end();
      return proc2.stdout.on('data', function(result) {
        var dimensions;
        dimensions = result.toString().match(/JPEG (\d*)x(\d*)/);
        return callback(null, parseInt(dimensions[1]), parseInt(dimensions[2]));
      });
    };

    Server.prototype.resizeAvatar = function(image_path, callback) {
      var _this = this;
      this.s3 = loadS3(this.s3_key, this.s3_secret, this.avatar_bucket);
      try {
        return this.s3.get(image_path, 'stream', function(err, res) {
          if (err) {
            return callback(err.toString(), null, null, null);
          }
          return convertImage(res, function(err, image_buffer) {
            var headers, height, path, width;
            if (err) {
              return callback(err.toString(), null, null, null);
            }
            path = image_path.split('.')[0] + '_thumb.jpg';
            headers = {
              'content-type': 'image/jpeg',
              'x-amz-acl': 'public-read'
            };
            width = 0;
            height = 0;
            return getDimensions(image_buffer, function(err, img_width, img_height) {
              if (err) {
                return callback(err.toString(), null, null, null);
              }
              width = img_width;
              height = img_height;
              return _this.s3.putBuffer(path, image_buffer.toBuffer(), false, headers, function(err) {
                if (err) {
                  return callback(err.toString(), null, null, null);
                }
                return callback(null, path, width, height);
              });
            });
          });
        });
      } catch (err) {
        return callback(err.toString(), null, null, null);
      }
    };

    Server.prototype.loadConfig = function(s3_key, s3_secret, avatar_bucket) {
      if (s3_key == null) {
        s3_key = null;
      }
      if (s3_secret == null) {
        s3_secret = null;
      }
      if (avatar_bucket == null) {
        avatar_bucket = null;
      }
      this.s3_key = s3_key || process.env.S3_KEY;
      this.s3_secret = s3_secret || process.env.S3_SECRET;
      return this.avatar_bucket = avatar_bucket || process.env.IMAGE_BUCKET;
    };

    Server.prototype.stop = function() {
      return this.httpServer.close();
    };

    return Server;

  })();

}).call(this);
